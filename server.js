import express from 'express';
import crypto from 'crypto';
const app = express();
const port = process.env.PORT || 5000;

app.use(express.json());
// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–¥–∞—á–∞ —Ñ–∞–π–ª–æ–≤ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
app.use('/static', express.static('./public'));

// –ü—Ä–æ—Å—Ç–æ–π Telegram-–±–æ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂ –ø–æ–¥–ø–∏—Å–æ–∫ Spotify

// –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
function validateEnvironment() {
  const required = {
    TELEGRAM_BOT_TOKEN: process.env.TELEGRAM_BOT_TOKEN,
    ADMIN_TELEGRAM_CHAT_ID: process.env.ADMIN_TELEGRAM_CHAT_ID,
    PLATEGA_API_KEY: process.env.PLATEGA_API_KEY,
    PLATEGA_MERCHANT_ID: process.env.PLATEGA_MERCHANT_ID
  };
  
  const missing = Object.entries(required)
    .filter(([key, value]) => !value)
    .map(([key]) => key);
  
  if (missing.length > 0) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:', missing.join(', '));
    process.exit(1);
  }
  
  console.log('‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  return required;
}

const ENV = validateEnvironment();
const TELEGRAM_BOT_TOKEN = ENV.TELEGRAM_BOT_TOKEN;
const ADMIN_CHAT_ID = ENV.ADMIN_TELEGRAM_CHAT_ID;
const PLATEGA_API_KEY = ENV.PLATEGA_API_KEY;
const PLATEGA_MERCHANT_ID = ENV.PLATEGA_MERCHANT_ID;

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π (–±–∞–∑–æ–≤–æ–µ —Ñ–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ)
import { readFileSync, writeFileSync, existsSync } from 'fs';

const SESSIONS_FILE = './user_sessions.json';

function loadSessions() {
  if (existsSync(SESSIONS_FILE)) {
    try {
      const data = readFileSync(SESSIONS_FILE, 'utf8');
      const sessions = new Map(JSON.parse(data));
      console.log('‚úÖ –°–µ—Å—Å–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', sessions.size, '–∞–∫—Ç–∏–≤–Ω—ã—Ö');
      return sessions;
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–π, —Å–æ–∑–¥–∞—é –Ω–æ–≤—ã–µ');
    }
  }
  return new Map();
}

function saveSessions(sessions) {
  try {
    // –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–æ–ª–∏ Spotify –Ω–∞ –¥–∏—Å–∫
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –±–µ–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const safeData = Array.from(sessions.entries()).map(([chatId, data]) => {
      const { spotifyPassword, ...safeSession } = data || {};
      return [chatId, safeSession];
    });
    const data = JSON.stringify(safeData);
    writeFileSync(SESSIONS_FILE, data);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π:', error);
  }
}

const userSessions = loadSessions();

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendTelegramMessage(chatId, text, keyboard = null, isInlineKeyboard = false) {
  const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
  
  const payload = {
    chat_id: chatId,
    text: text,
    parse_mode: 'Markdown'
  };
  
  if (keyboard) {
    if (isInlineKeyboard) {
      payload.reply_markup = {
        inline_keyboard: keyboard
      };
    } else {
      payload.reply_markup = {
        keyboard: keyboard,
        resize_keyboard: true,
        one_time_keyboard: false
      };
    }
  }
  
  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    
    if (!response.ok) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', response.statusText);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram
async function sendTelegramPhoto(chatId, photoPath, caption = null, keyboard = null) {
  try {
    const FormData = (await import('form-data')).default;
    const fs = await import('fs');
    const path = await import('path');
    
    console.log('üñºÔ∏è –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ:', { chatId, photoPath });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if (!fs.existsSync(photoPath)) {
      console.error('‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:', photoPath);
      return false;
    }
    
    console.log('üìä –§–∞–π–ª –Ω–∞–π–¥–µ–Ω, —Ä–∞–∑–º–µ—Ä:', fs.statSync(photoPath).size, '–±–∞–π—Ç');
    
    const form = new FormData();
    form.append('chat_id', String(chatId));
    form.append('photo', fs.createReadStream(photoPath));
    
    if (caption) {
      form.append('caption', caption);
      form.append('parse_mode', 'Markdown');
    }
    
    if (keyboard) {
      form.append('reply_markup', JSON.stringify({
        keyboard: keyboard,
        resize_keyboard: true,
        one_time_keyboard: false
      }));
    }
    
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–æ—Ç–æ –≤ Telegram API...');
    const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendPhoto`, {
      method: 'POST',
      body: form,
      headers: form.getHeaders()
    });
    
    const result = await response.json();
    if (!response.ok) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ:', {
        status: response.status,
        error: result.description || result.error_code,
        result: result
      });
      return false;
    } else {
      console.log('‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
      return true;
    }
  } catch (error) {
    console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ:', error);
    return false;
  }
}

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async function sendWelcomeMessage(chatId) {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const photoPath = './public/images/pikachu-spotify.png';
  await sendTelegramPhoto(chatId, photoPath);
  
  const welcomeText = `
üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Blesk!* üåü

–í–∞—à –Ω–∞–¥—ë–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å –ø–æ–¥–ø–∏—Å–æ–∫ Spotify Family üéµ

üíö –ü—Ä–µ–º–∏—É–º –∫–∞—á–µ—Å—Ç–≤–æ –º—É–∑—ã–∫–∏
üí∞ –î–æ—Å—Ç—É–ø–Ω–∞—è —Ü–µ–Ω–∞ ‚Äî 155 —Ä—É–±/–º–µ—Å—è—Ü  
‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
üõ°Ô∏è –ì–∞—Ä–∞–Ω—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

*–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*
  `;
  
  const keyboard = [
    [{ text: "üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É (155 —Ä—É–±) ‚úÖ" }],
    [{ text: "üõ†Ô∏è –°–∞–ø–ø–æ—Ä—Ç" }, { text: "‚ùì FAQ" }]
  ];
  
  await sendTelegramMessage(chatId, welcomeText, keyboard);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ Platega API
async function createPayment(chatId, amount = 155) {
  try {
    // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ chatId - —Å—Ç—Ä–æ–∫–∞
    const chatIdStr = String(chatId);
    const orderId = `blesk_${chatIdStr}_${Date.now()}`;
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º UUID –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const transactionId = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
      const r = Math.random() * 16 | 0;
      const v = c === 'x' ? r : (r & 0x3 | 0x8);
      return v.toString(16);
    });

    const paymentData = {
      command: "CreateTransaction", // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è Platega API
      paymentMethod: 2, // –°–ë–ü / QR
      id: transactionId, // UUID –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
      paymentDetails: {
        amount: amount,
        currency: "RUB"
      },
      description: `–ü–æ–¥–ø–∏—Å–∫–∞ Spotify Family - Blesk`,
      return: `https://t.me/BleskBot`,
      failedUrl: `https://t.me/BleskBot`,
      payload: chatIdStr // —Å–æ—Ö—Ä–∞–Ω—è–µ–º chatId –¥–ª—è webhook
    };
    
    console.log('üîó –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ Platega API:', {
      url: 'https://app.platega.io/transaction/process',
      headers: { 'X-MerchantId': PLATEGA_MERCHANT_ID, 'X-Secret': '[HIDDEN]' },
      body: paymentData
    });

    const response = await fetch('https://app.platega.io/transaction/process', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-MerchantId': PLATEGA_MERCHANT_ID,
        'X-Secret': PLATEGA_API_KEY
      },
      body: JSON.stringify(paymentData)
    });
    
    console.log(`üì° –û—Ç–≤–µ—Ç –æ—Ç Platega API: ${response.status} ${response.statusText}`);
    
    if (!response.ok) {
      const errorText = await response.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ API:', errorText);
      throw new Error(`Platega API error: ${response.status} - ${errorText}`);
    }
    
    const result = await response.json();
    
    console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç Platega:', result);
    
    // Platega –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É –≤ –ø–æ–ª–µ "redirect"
    if (result && result.redirect && result.status === 'PENDING') {
      return {
        success: true,
        paymentUrl: result.redirect,
        orderId: result.transactionId || transactionId,
        status: result.status,
        expiresIn: result.expiresIn
      };
    } else {
      console.log('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:', result);
      throw new Error(`Invalid payment response from Platega: ${result?.status || 'unknown status'}`);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', error);
    return {
      success: false,
      error: error.message
    };
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É
async function generatePaymentLink(chatId, amount = 155) {
  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º chatId –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
  const chatIdStr = String(chatId);
  const payment = await createPayment(chatIdStr, amount);
  
  if (!payment.success) {
    await sendTelegramMessage(chatIdStr, 
      '‚ùå –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞.\n\nüõ†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @chanceofrain'
    );
    return;
  }
  
  const paymentText = `
üí≥ *–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ Spotify Family*

üí∞ –°—É–º–º–∞: ${amount} —Ä—É–±/–º–µ—Å—è—Ü
‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç: 30 –¥–Ω–µ–π

üîó *–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:*
${payment.paymentUrl}

üìù *–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã:*
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω Spotify
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å Spotify
3. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–¥–æ 24 —á–∞—Å–æ–≤)

‚ö†Ô∏è *–í–∞–∂–Ω–æ:* –ù–µ –¥–æ–ª–∂–Ω—ã —Å–æ—Å—Ç–æ—è—Ç—å –≤ —Å–µ–º–µ–π–Ω–æ–º –ø–ª–∞–Ω–µ —Ä–∞–Ω–µ–µ!
  `;
  
  await sendTelegramMessage(chatIdStr, paymentText);
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã
  const session = {
    state: 'waiting_payment',
    paymentAmount: amount,
    orderId: payment.orderId,
    timestamp: Date.now()
  };
  
  userSessions.set(chatIdStr, session);
  saveSessions(userSessions);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö Spotify
async function collectSpotifyData(chatId, message) {
  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º chatId –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
  const chatIdStr = String(chatId);
  const session = userSessions.get(chatIdStr);
  
  if (!session) {
    await sendTelegramMessage(chatIdStr, "‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start");
    return;
  }
  
  if (session.state === 'waiting_spotify_login') {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥–∏–Ω
    session.spotifyLogin = message;
    session.state = 'waiting_spotify_password';
    userSessions.set(chatIdStr, session);
    saveSessions(userSessions);
    
    await sendTelegramMessage(chatIdStr, 
      "‚úÖ –õ–æ–≥–∏–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n\nüîê –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à *–ø–∞—Ä–æ–ª—å* –æ—Ç Spotify:"
    );
    
  } else if (session.state === 'waiting_spotify_password') {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–æ–ª—å
    session.spotifyPassword = message;
    session.state = 'completed';
    userSessions.set(chatIdStr, session);
    saveSessions(userSessions);
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await sendTelegramMessage(chatIdStr, 
      "‚úÖ *–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã!*\n\nüì§ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n‚è∞ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.\n\nüíö –°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä Blesk!"
    );
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    await notifyAdmin(session.spotifyLogin, session.spotifyPassword, chatIdStr, session.orderId);
    
    // –ù–ï –æ—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é - –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    session.state = 'waiting_activation';
    userSessions.set(chatIdStr, session);
    saveSessions(userSessions);
  }
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
async function notifyAdmin(login, password, userChatId, orderId) {
  if (!ADMIN_CHAT_ID) {
    console.error('ADMIN_TELEGRAM_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    return;
  }
  
  const adminText = `
üîî *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ Spotify Family!*

üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* ${userChatId}
üîë *–ó–∞–∫–∞–∑:* \`${orderId}\`
üìß *–õ–æ–≥–∏–Ω:* \`${login}\`
üîê *–ü–∞—Ä–æ–ª—å:* \`${password}\`
üí∞ *–°—É–º–º–∞:* 155 —Ä—É–±

‚è∞ *–í—Ä–µ–º—è:* ${new Date().toLocaleString('ru-RU')}

*–û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –∑–∞—è–≤–∫—É –∏ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–µ–º–µ–π–Ω–æ–º—É –ø–ª–∞–Ω—É.*
  `;
  
  const keyboard = [
    [{ text: "‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data: `done_${userChatId}` }]
  ];
  
  await sendTelegramMessage(ADMIN_CHAT_ID, adminText, keyboard, true);
}

// FAQ
async function showFAQ(chatId) {
  const faqText = `
‚ùì *–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã (FAQ)*

*1. –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π?*
–û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ —Å–∞–ø–ø–æ—Ä—Ç ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º + –ø—Ä–æ–¥–ª–∏–º –Ω–∞ –º–µ—Å—è—Ü ‚úÖ

*2. –ö–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ?*
–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å ‚úÖ

*3. –ë—ã–ª –≤ —Å–µ–º–µ–π–Ω–æ–º –ø–ª–∞–Ω–µ –∑–∞ –≥–æ–¥?*
–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ–æ–±—â–∏—Ç–µ –≤ —Å–∞–ø–ø–æ—Ä—Ç ‚úÖ

*4. –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç?*
155 —Ä—É–±/–º–µ—Å—è—Ü –∑–∞ Spotify Family ‚úÖ

*5. –ö–∞–∫ –¥–æ–ª–≥–æ –∂–¥–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è?*
–î–æ 24 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö ‚úÖ
  `;
  
  await sendTelegramMessage(chatId, faqText);
}

// Webhook –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–ª–∞—Ç–µ–∂–∞—Ö –æ—Ç Platega
app.post('/webhook/payment', async (req, res) => {
  try {
    const paymentData = req.body;
    
    // –ò—â–µ–º –ø–æ–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∏ ID –≤ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Platega
    const status = paymentData.status || paymentData.state || paymentData.payment_status;
    const transactionId = paymentData.id || paymentData.transactionId || paymentData.order_id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    const isSuccessful = status === 'paid' || status === 'success' || status === 'completed' || 
                        status === 'PAID' || status === 'SUCCESS' || status === 'CONFIRMED';
    
    if (isSuccessful && transactionId) {
      // –ü–æ–ª—É—á–∞–µ–º chatId –∏–∑ payload –∫–æ—Ç–æ—Ä—ã–π –º—ã –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
      let chatIdStr = paymentData.payload;
      
      // –ï—Å–ª–∏ payload –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –æ–∂–∏–¥–∞—é—â–∏–µ –æ–ø–ª–∞—Ç—É
      if (!chatIdStr) {
        for (const [sessionChatId, session] of userSessions.entries()) {
          if (session.state === 'waiting_payment' && session.orderId === transactionId) {
            chatIdStr = sessionChatId;
            break;
          }
        }
      }
      
      // –í–†–ï–ú–ï–ù–ù–û: –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É –µ—Å–ª–∏ chatId –Ω–µ –Ω–∞–π–¥–µ–Ω
      if (!chatIdStr) {
        chatIdStr = ADMIN_CHAT_ID;
        await sendTelegramMessage(ADMIN_CHAT_ID, 
          `üîî *–ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω!*\n\nüí∞ –°—É–º–º–∞: 155 —Ä—É–±\nüîë ID: \`${transactionId}\`\nüìä –°—Ç–∞—Ç—É—Å: ${status}\n\n‚ö†Ô∏è ChatId –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞.`
        );
      } else {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const session = userSessions.get(chatIdStr) || {};
        session.state = 'waiting_spotify_login';
        session.paymentConfirmed = true;
        session.transactionId = transactionId;
        session.timestamp = Date.now();
        
        userSessions.set(chatIdStr, session);
        saveSessions(userSessions);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await sendTelegramMessage(chatIdStr, 
          "‚úÖ *–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞!*\n\nüéµ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à *–ª–æ–≥–∏–Ω* –æ—Ç Spotify –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ–º–µ–π–Ω–æ–º—É –ø–ª–∞–Ω—É:\n\nüíå *–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!*"
        );
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–º –ø–ª–∞—Ç–µ–∂–µ
        await sendTelegramMessage(ADMIN_CHAT_ID, 
          `üí∞ *–ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!*\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${chatIdStr}\nüí≥ ID: \`${transactionId}\`\nüí∞ –°—É–º–º–∞: 155 —Ä—É–±\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –Ω–∞ —ç—Ç–∞–ø –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö Spotify.`
        );
      }
    }
    
    res.status(200).send('OK');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ webhook:', error);
    res.status(500).send('Error');
  }
});

// Webhook –¥–ª—è Telegram
app.post('/webhook/telegram', async (req, res) => {
  try {
    const update = req.body;
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ (callback_query)
    if (update.callback_query) {
      const callbackQuery = update.callback_query;
      const chatId = String(callbackQuery.from.id);
      const data = callbackQuery.data;
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ì–æ—Ç–æ–≤–æ" –æ—Ç –∞–¥–º–∏–Ω–∞
      if (data && data.startsWith('done_') && chatId === ADMIN_CHAT_ID) {
        const userChatId = data.replace('done_', '');
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        await sendTelegramMessage(userChatId, 
          "üéâ *–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!*\n\n‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ Spotify Family —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!\nüéµ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ —Å–µ–º–µ–π–Ω–æ–≥–æ –ø–ª–∞–Ω–∞.\n\nüíö –°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä Blesk!\n\n*–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ —Å–∞–ø–ø–æ—Ä—Ç.*"
        );
        
        // –û—Ç–≤–µ—á–∞–µ–º –∞–¥–º–∏–Ω—É —á—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
        await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/answerCallbackQuery`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            callback_query_id: callbackQuery.id,
            text: "‚úÖ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏!"
          })
        });
        
        // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        userSessions.delete(userChatId);
        saveSessions(userSessions);
      }
    }
    
    if (update.message) {
      const chatId = String(update.message.chat.id); // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º chatId –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
      const text = update.message.text;
      const username = update.message.from.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
      
      console.log(`üì± –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @${username}: ${text}`);
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
      if (text === '/start') {
        await sendWelcomeMessage(chatId);
        
      } else if (text === 'üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É (155 —Ä—É–±) ‚úÖ') {
        await generatePaymentLink(chatId);
        
      } else if (text === 'üõ†Ô∏è –°–∞–ø–ø–æ—Ä—Ç') {
        await sendTelegramMessage(chatId, 
          "üõ†Ô∏è *–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Blesk*\n\nüìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:\nüë§ @chanceofrain\n\nüíö –ú—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å!"
        );
        
      } else if (text === '‚ùì FAQ') {
        await showFAQ(chatId);
        
      } else {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö Spotify
        const session = userSessions.get(chatId);
        if (session && (session.state === 'waiting_spotify_login' || session.state === 'waiting_spotify_password')) {
          await collectSpotifyData(chatId, text);
        } else if (session && session.state === 'waiting_payment') {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –æ–ø–ª–∞—Ç–∏–ª
          await sendTelegramMessage(chatId, 
            "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã—à–µ.\n\n–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ Spotify."
          );
        } else {
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –µ—Å–ª–∏ –Ω–µ–ø–æ–Ω—è—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
          await sendTelegramMessage(chatId, 
            "‚ùì –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ:",
            [
              [{ text: "üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É (155 —Ä—É–±) ‚úÖ" }],
              [{ text: "üõ†Ô∏è –°–∞–ø–ø–æ—Ä—Ç" }, { text: "‚ùì FAQ" }]
            ]
          );
        }
      }
    }
    
    res.status(200).send('OK');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error);
    res.status(500).send('Error');
  }
});

// –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
  res.send(`
    <h1>üåü Blesk Bot - Spotify Family</h1>
    <p>‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!</p>
    <p>üí∞ –ü—Ä–æ–¥–∞–∂–∏ –ø–æ–¥–ø–∏—Å–æ–∫ Spotify Family –∑–∞ 155 —Ä—É–±/–º–µ—Å—è—Ü</p>
    <p>üì± Telegram: @BleskBot</p>
  `);
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram webhook
async function setupTelegramWebhook() {
  try {
    const domain = process.env.REPLIT_DOMAINS?.split(',')[0];
    if (!domain) {
      console.warn('‚ö†Ô∏è REPLIT_DOMAINS –Ω–µ –Ω–∞–π–¥–µ–Ω, webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      return;
    }
    
    const webhookUrl = `https://${domain}/webhook/telegram`;
    const setWebhookUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/setWebhook`;
    
    console.log(`üì° –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é Telegram webhook: ${webhookUrl}`);
    
    const response = await fetch(setWebhookUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ url: webhookUrl })
    });
    
    const result = await response.json();
    
    if (result.ok) {
      console.log('‚úÖ Telegram webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook:', result.description);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram webhook:', error.message);
  }
}

app.listen(port, '0.0.0.0', async () => {
  console.log(`üöÄ Blesk Bot –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
  console.log(`üíö –ì–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∂–∞–º –ø–æ–¥–ø–∏—Å–æ–∫ Spotify!`);
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
  await setupTelegramWebhook();
});
